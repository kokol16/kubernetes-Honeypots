---
daemonset:
  enabled: false
  

deployment:
  # Annotations to apply to the deployment
  annotations: {}
  # additionals labels
  labels: {}
  affinity: {}
  # Include the deployment
  enabled: yes
  # Extra environment variables for Filebeat container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: 
  - name: NODE_NAME
    value: spec.nodeName
  #  - name: MY_ENVIRONMENT_VAR
  #    value: the_value_goes_here
  extraVolumes:
    - name: certs
      hostPath:
        path: /certs        
    - name: honeypotlogs  
      hostPath:
        path:  /honeypot-logs
    
    - name: data
      hostPath:
        path: /var/lib/filebeat-data
        type: DirectoryOrCreate
  extraVolumeMounts:
      #mountPath: /var/lib/docker/containers
    - mountPath: /honeypot-logs
      name: honeypotlogs
      readOnly: true
    - mountPath: /certs
      name: certs
    - mountPath: /usr/share/filebeat/data
      name: data      

    # - name: extras
    #   mountPath: /usr/share/extras
    #   readOnly: true
  # such as filebeat.yml for deployment
  filebeatConfig:
    filebeat.yml: |-
      filebeat.inputs:
      - type: log
        enabled: true
        paths:
          - /honeypot-logs/conpot/conpot.json*
        fields:   
          document_type: conpot
        fields_under_root: true
      - type: log
        enabled: true
        paths:
          - /honeypot-logs/cowrie/cowrie.json*
        fields:   
          document_type: cowrie
        fields_under_root: true
      - type: log
        enabled: true
        paths:
          - /honeypot-logs/dionaea/dionaea.json*
        fields:   
          document_type: dionaea
        fields_under_root: true
        processors:
          - add_kubernetes_metadata:
              host: ${NODE_NAME}
              matchers:
              - logs_path:
                  logs_path: "/honeypot-logs/dionaea"
                  logs_path: "/honeypot-logs/cowrie"
                  logs_path: "/honeypot-logs/conpot"
  
      processors:
        - add_cloud_metadata:
        - add_host_metadata:
  
      cloud.id: ${ELASTIC_CLOUD_ID}
      cloud.auth: ${ELASTIC_CLOUD_AUTH}
  
      output.logstash:
        enabled: true
        hosts: [""]
        ssl.certificate_authorities: ["/certs/ca.crt"]
        ssl.certificate: "/certs/client.crt"
        ssl.key: "/certs/client.key"
        # ssl.key_passphrase: "PASSWORD"
        ssl.supported_protocols: "TLSv1.2"
      logging.level: debug
      #logging.to_files: true
      #logging.files:
       #path: /var/log/filebeat
       # name: filebeat
       # keepfiles: 7
       # permissions: 0644
#      ssl.certificate_authorities: ["/ca-cert.pem"]
#      ssl.certificate: "/client-cert.pem"
#      ssl.key: "/client-key.pem"
  nodeSelector: {}
  # A list of secrets and their paths to mount inside the pod
  # This is useful for mounting certificates for security other sensitive values
  secretMounts: 

  #
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the Filebeat Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    requests:
      cpu: "100m"
      memory: "100Mi"
    limits:
      cpu: "1000m"
      memory: "200Mi"
  tolerations: []

# Replicas being used for the filebeat deployment
replicas: 1

extraContainers: ""
# - name: dummy-init
#   image: busybox
#   command: ['echo', 'hey']

extraInitContainers: []
# - name: dummy-init

# Root directory where Filebeat will write data to in order to persist registry data across pod restarts (file position and other metadata).
hostPathRoot: /var/lib

dnsConfig: {}
# options:
#   - name: ndots
#     value: "2"
hostAliases: []
#- ip: "127.0.0.1"
#  hostnames:
#  - "foo.local"
#  - "bar.local"
image: "docker.elastic.co/beats/filebeat"
imageTag: "7.14.0"
imagePullPolicy: "IfNotPresent"
imagePullSecrets: []

livenessProbe:
  #exec:
  #  command:
  #    - sh
  #    - -c
  #    - |
  #      #!/usr/bin/env bash -e
  #      curl --fail 127.0.0.1:5066
  #failureThreshold: 3
  #initialDelaySeconds: 10
  #periodSeconds: 10
  #timeoutSeconds: 5

readinessProbe:
  #exec:
  #  command:
  #    - sh
  #    - -c
  #    - |
  #      #!/usr/bin/env bash -e
  #      filebeat test output
  #failureThreshold: 3
  #initialDelaySeconds: 10
  #periodSeconds: 10
  #timeoutSeconds: 5

# Whether this chart should self-manage its service account, role, and associated role binding.
managedServiceAccount: true

clusterRoleRules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - nodes
      - pods
    verbs:
      - get
      - list
      - watch

podAnnotations:
  {}
  # iam.amazonaws.com/role: es-cluster

# Custom service account override that the pod will use
serviceAccount: ""

# Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
serviceAccountAnnotations:
  {}
  # eks.amazonaws.com/role-arn: arn:aws:iam::111111111111:role/k8s.clustername.namespace.serviceaccount

# How long to wait for Filebeat pods to stop gracefully
terminationGracePeriod: 30
# This is the PriorityClass settings as defined in
# https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
priorityClassName: ""

updateStrategy: RollingUpdate

# Override various naming aspects of this chart
# Only edit these if you know what you're doing
nameOverride: ""
fullnameOverride: ""

# DEPRECATED
affinity: {}
envFrom: []
extraEnvs: []
extraVolumes: []

extraVolumeMounts: [] 

# Allows you to add any config files in /usr/share/filebeat
# such as filebeat.yml for both daemonset and deployment
filebeatConfig: {}
nodeSelector: {}
podSecurityContext: {}
resources: {}
secretMounts: []
tolerations: []
labels: {}
